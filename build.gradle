plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version "${mdg_version}"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()
    maven { // JEI
        url "https://maven.blamejared.com"
    }
    maven { // Curios
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven { // Curseforge
        url "https://cursemaven.com"
    }
    maven { // MEK
        url 'https://modmaven.dev/'
    }
    maven { // Accessories
        url 'https://maven.wispforest.io'
    }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url 'https://maven.shedaniel.me/' }

    maven { // Curios continuation
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
}

base {
    archivesName = mod_id
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
        vendor.set(JvmVendorSpec.JETBRAINS)
    }
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            systemProperty 'guideme.crystal_tools.guide.sources', file('src/main/resources/assets/crystal_tools/guides/crystal_tools/guide').absolutePath
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly "mezz.jei:jei-1.21.7-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-1.21.7-neoforge-api:${jei_version}"
//    runtimeOnly "mezz.jei:jei-1.21.7-neoforge:${jei_version}"
    // Compile against only the API artifact
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
    // Use the full Curios API jar at runtime
//    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"

//    compileOnly "curse.maven:jade-api-324717:${jade_api_id}"
//    runtimeOnly "curse.maven:jade-324717:${jade_id}"
//
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}"// Mekanism
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}:additions"// Mekanism: Additions
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}:generators"// Mekanism: Generators
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}:tools"// Mekanism: Tools
//
    compileOnly "org.appliedenergistics:guideme:${guideme_version}:api"
//    runtimeOnly "org.appliedenergistics:guideme:${guideme_version}"


//    implementation("io.wispforest:accessories-neoforge:${accessories_version}")
//    implementation "curse.maven:accessories-cc-layer-1005683:5823562" // Curios compat layer

//    runtimeOnly "curse.maven:adorned-1036809:5740650" // Adorned

//     implementation "curse.maven:energized-power-782147:6927412" // Energized Power
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}