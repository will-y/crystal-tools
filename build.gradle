plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neo_gradle_version}"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
        vendor.set(JvmVendorSpec.JETBRAINS)
    }
}

// Required because all of my datagen outputs have a duplicate cache file name
tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Example
}

// Made this so that the dev environment has the vanilla skill tress but the build doesn't
sourceSets {
    vanilla {
        depends.on sourceSets.main
    }
}

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        // Uncomment this to test vanilla trees
//        modSource sourceSets.vanilla
//        sourceSets.vanilla.resources {srcDir 'src/generated/vanilla/full'}
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        systemProperty 'guideme.crystal_tools.guide.sources', file('src/main/resources/assets/crystal_tools/guides/crystal_tools/guide').absolutePath

//        renderDoc {
//            enabled true
//        }
    }

    server {
//        modSource sourceSets.vanilla
//        sourceSets.vanilla.resources {srcDir 'src/generated/vanilla/full'}
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    clientData {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }

    serverData {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    mavenCentral()
    maven { // JEI
        url "https://maven.blamejared.com"
    }
    maven { // Curios
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven { // Curseforge
        url "https://cursemaven.com"
    }
    maven { // MEK
        url 'https://modmaven.dev/'
    }
    maven { // Accessories
        url 'https://maven.wispforest.io'
    }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url 'https://maven.shedaniel.me/' }

    maven { // Curios continuation
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly "mezz.jei:jei-1.21.7-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-1.21.7-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-1.21.7-neoforge:${jei_version}"
    // Compile against only the API artifact
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
    // Use the full Curios API jar at runtime
//    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"

//    compileOnly "curse.maven:jade-api-324717:${jade_api_id}"
//    runtimeOnly "curse.maven:jade-324717:${jade_id}"
//
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}"// Mekanism
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}:additions"// Mekanism: Additions
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}:generators"// Mekanism: Generators
//    runtimeOnly "mekanism:Mekanism:${mekanism_version}:tools"// Mekanism: Tools
//
    compileOnly "org.appliedenergistics:guideme:${guideme_version}:api"
//    runtimeOnly "org.appliedenergistics:guideme:${guideme_version}"


//    implementation("io.wispforest:accessories-neoforge:${accessories_version}")
//    implementation "curse.maven:accessories-cc-layer-1005683:5823562" // Curios compat layer

//    runtimeOnly "curse.maven:adorned-1036809:5740650" // Adorned
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}